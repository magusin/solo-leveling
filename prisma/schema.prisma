// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  email             String    @unique
  password          String
  emailVerified     Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relation avec les tokens de confirmation
  emailConfirmations EmailConfirmation[]
}

model EmailConfirmation {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int       @unique
  expiresAt DateTime
  used      Boolean   @default(false)

  user User @relation(fields: [userId], references: [id])
}

model Build {
  id          Int       @id @default(autoincrement())
  characterId Int
  character   Character  @relation(fields: [characterId], references: [id])
  title       String
  description String
  author      String
  items       Json      // Liste des 8 items avec leurs stats
  createdAt   DateTime  @default(now())
}

model ItemSet {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description1 String    // Bonus pour 2 items
  description2 String    // Bonus pour 4 items
  description3 String    // Bonus pour 8 items
  items       Item[]    // Items appartenant Ã  cet ensemble
}

model ItemType {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  primaryStats    String[]  // Statistiques principales possibles pour ce type
  secondaryStats  String[]  // Statistiques secondaires possibles pour ce type
  items           Item[]    // Relation avec les items
}

model Item {
  id          Int       @id @default(autoincrement())
  name        String
  image       String    // URL de l'image de l'item
  typeId      Int       // Relation avec ItemType
  type        ItemType  @relation(fields: [typeId], references: [id])
  itemSetId   Int       // Relation avec ItemSet
  itemSet     ItemSet   @relation(fields: [itemSetId], references: [id])
}

model Character {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  image     String   // URL de l'image du personnage
  builds    Build[]  // Relation avec les builds
}